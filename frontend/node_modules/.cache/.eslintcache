[{"/Users/yeoinsu/Desktop/react-study/src/index.js":"1","/Users/yeoinsu/Desktop/react-study/src/App.js":"2","/Users/yeoinsu/Desktop/react-study/src/components/Main.js":"3","/Users/yeoinsu/Desktop/react-study/src/components/SideBar.js":"4","/Users/yeoinsu/Desktop/react-study/src/components/LoginRegister.js":"5","/Users/yeoinsu/Desktop/react-study/src/components/Header.js":"6","/Users/yeoinsu/Desktop/react-study/src/components/SidebarMenu.js":"7","/Users/yeoinsu/Desktop/Ari/frontend/src/index.js":"8","/Users/yeoinsu/Desktop/Ari/frontend/src/App.js":"9","/Users/yeoinsu/Desktop/Ari/frontend/src/components/LoginRegister.js":"10","/Users/yeoinsu/Desktop/Ari/frontend/src/components/Main.js":"11","/Users/yeoinsu/Desktop/Ari/frontend/src/components/Header.js":"12","/Users/yeoinsu/Desktop/Ari/frontend/src/components/SideBar.js":"13","/Users/yeoinsu/Desktop/Ari/frontend/src/components/SidebarMenu.js":"14","/Users/yeoinsu/Desktop/Ari/frontend/src/pages/Login.js":"15","/Users/yeoinsu/Desktop/Ari/frontend/src/pages/LoginStore.js":"16","/Users/yeoinsu/Desktop/Ari/frontend/src/pages/SignupUser.js":"17","/Users/yeoinsu/Desktop/Ari/frontend/src/pages/LoginUser.js":"18","/Users/yeoinsu/Desktop/Ari/frontend/src/pages/SignupStore.js":"19","/Users/yeoinsu/Desktop/Ari/frontend/src/state.js":"20","/Users/yeoinsu/Desktop/Ari/frontend/src/services/login/loginData.js":"21","/Users/yeoinsu/Desktop/Ari/frontend/src/services/sign/signStoreData.js":"22","/Users/yeoinsu/Desktop/Ari/frontend/src/services/sign/signUserData.js":"23","/Users/yeoinsu/Desktop/Ari/frontend/src/components/common/Mainbutton.js":"24"},{"size":410,"mtime":1645691335378,"results":"25","hashOfConfig":"26"},{"size":447,"mtime":1658819338181,"results":"27","hashOfConfig":"26"},{"size":844,"mtime":1658828190764,"results":"28","hashOfConfig":"26"},{"size":1858,"mtime":1658828238243,"results":"29","hashOfConfig":"26"},{"size":1053,"mtime":1658822985085,"results":"30","hashOfConfig":"26"},{"size":341,"mtime":1658828166502,"results":"31","hashOfConfig":"26"},{"size":816,"mtime":1658827033322,"results":"32","hashOfConfig":"26"},{"size":410,"mtime":1645691335378,"results":"33","hashOfConfig":"34"},{"size":1056,"mtime":1659161653914,"results":"35","hashOfConfig":"34"},{"size":1072,"mtime":1659161904674,"results":"36","hashOfConfig":"34"},{"size":844,"mtime":1659162201945,"results":"37","hashOfConfig":"34"},{"size":341,"mtime":1658828166502,"results":"38","hashOfConfig":"34"},{"size":1858,"mtime":1658828238243,"results":"39","hashOfConfig":"34"},{"size":816,"mtime":1658827033322,"results":"40","hashOfConfig":"34"},{"size":3806,"mtime":1659161567837,"results":"41","hashOfConfig":"34"},{"size":1069,"mtime":1658990653000,"results":"42","hashOfConfig":"34"},{"size":10959,"mtime":1658994936000,"results":"43","hashOfConfig":"34"},{"size":1495,"mtime":1659161145454,"results":"44","hashOfConfig":"34"},{"size":11566,"mtime":1658994515000,"results":"45","hashOfConfig":"34"},{"size":416,"mtime":1659161227154,"results":"46","hashOfConfig":"34"},{"size":421,"mtime":1658989689000,"results":"47","hashOfConfig":"34"},{"size":529,"mtime":1658989433000,"results":"48","hashOfConfig":"34"},{"size":525,"mtime":1658988534000,"results":"49","hashOfConfig":"34"},{"size":693,"mtime":1658994752000,"results":"50","hashOfConfig":"34"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"14h488l",{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"64"},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},"1a4usvm",{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"80"},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"80"},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"80"},{"filePath":"105","messages":"106","suppressedMessages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"80"},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"80"},{"filePath":"119","messages":"120","suppressedMessages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"122","messages":"123","suppressedMessages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"125","messages":"126","suppressedMessages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"128","messages":"129","suppressedMessages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"131","messages":"132","suppressedMessages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},"/Users/yeoinsu/Desktop/react-study/src/index.js",[],[],["134","135"],"/Users/yeoinsu/Desktop/react-study/src/App.js",["136"],[],"import { useState } from \"react\";\nimport { BrowserRouter, Route, Routes } from \"react-router-dom\";\nimport Main from \"./components/Main\";\nimport LoginRegister from \"./components/LoginRegister\";\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Routes>\n        <Route path=\"/\" element={<Main />}></Route>\n        <Route path=\"/loginRegister\" element={<LoginRegister />}></Route>\n      </Routes>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n",["137","138"],"/Users/yeoinsu/Desktop/react-study/src/components/Main.js",["139"],[],"import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"../App.css\";\nimport SideBar from \"./SideBar\";\n\nconst Main = () => {\n  const userState = 0; // 0:비회원 1:손님 2:사장님 3:관리자\n  const [isOpend, setIsOpened] = useState(false);\n  const onClick = () => {\n    setIsOpened(!isOpend);\n  };\n\n  return (\n    <>\n      <div>\n        {isOpend ? (\n          <img\n            alt=\"\"\n            className=\"darkImage\"\n            onClick={onClick}\n            src=\"images/map.jpg\"\n          ></img>\n        ) : (\n          <img alt=\"\" src=\"images/map.jpg\"></img>\n        )}\n      </div>\n      <button className=\"side_btn\" onClick={onClick}>\n        <img alt=\"\" src=\"images/button.png\"></img>\n      </button>\n      {isOpend ? <SideBar userState={userState} /> : null}\n    </>\n  );\n};\n\nexport default Main;\n",["140","141"],"/Users/yeoinsu/Desktop/react-study/src/components/SideBar.js",[],[],"/Users/yeoinsu/Desktop/react-study/src/components/LoginRegister.js",[],[],"/Users/yeoinsu/Desktop/react-study/src/components/Header.js",[],[],"/Users/yeoinsu/Desktop/react-study/src/components/SidebarMenu.js",["142"],[],"/Users/yeoinsu/Desktop/Ari/frontend/src/index.js",[],[],["143","144"],"/Users/yeoinsu/Desktop/Ari/frontend/src/App.js",["145"],[],"import { useState } from \"react\";\nimport { BrowserRouter, Route, Routes } from \"react-router-dom\";\nimport Main from \"./components/Main\";\nimport LoginRegister from \"./components/LoginRegister\";\nimport Login from \"./pages/Login\";\nimport LoginUser from \"./pages/LoginUser\";\nimport LoginStore from \"./pages/LoginStore\";\nimport SignupUser from \"./pages/SignupUser\";\nimport SignupStore from \"./pages/SignupStore\";\nimport { RecoilRoot } from \"recoil\";\nfunction App() {\n  return (\n    <RecoilRoot>\n      <BrowserRouter>\n        <Routes>\n          <Route path=\"/\" element={<Main />}></Route>\n          <Route path=\"/loginRegister\" element={<LoginRegister />}></Route>\n          <Route path=\"/login\" element={<Login />} />\n          <Route path=\"/loginUser\" element={<LoginUser />} />\n          <Route path=\"/loginStore\" element={<LoginStore />} />\n          <Route path=\"/signupUser\" element={<SignupUser />} />\n          <Route path=\"/signupStore\" element={<SignupStore />} />\n        </Routes>\n      </BrowserRouter>\n    </RecoilRoot>\n  );\n}\n\nexport default App;\n","/Users/yeoinsu/Desktop/Ari/frontend/src/components/LoginRegister.js",[],[],"/Users/yeoinsu/Desktop/Ari/frontend/src/components/Main.js",["146"],[],"/Users/yeoinsu/Desktop/Ari/frontend/src/components/Header.js",[],[],"/Users/yeoinsu/Desktop/Ari/frontend/src/components/SideBar.js",[],[],"/Users/yeoinsu/Desktop/Ari/frontend/src/components/SidebarMenu.js",["147"],[],"import React from \"react\";\nimport \"../App.css\";\nimport \"../styles/SidebarMenu.css\";\nimport { Link } from \"react-router-dom\";\n\nconst SidebarMenu = (userState) => {\n  const menuForGuest = [\n    \"공지사항\",\n    \"즐겨찾기\",\n    \"마이페이지\",\n    \"문의하기\",\n    \"마이 스탬프\",\n  ];\n  const menuForBusiness = [\n    \"공지사항\",\n    \"내 가게 정보 관리\",\n    \"제휴 맺기 게시판\",\n    \"채팅 목록\",\n    \"문의하기\",\n  ];\n\n  return (\n    <div className=\"menuListContainer\">\n      {userState.userState === 1\n        ? menuForGuest.map((item, index) => {\n            return <span key={index}>{item}</span>;\n          })\n        : menuForBusiness.map((item, index) => {\n            return <span key={index}>{item}</span>;\n          })}\n    </div>\n  );\n};\n\nexport default SidebarMenu;\n","/Users/yeoinsu/Desktop/Ari/frontend/src/pages/Login.js",["148","149"],[],"import { React, useState } from \"react\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport styled from \"styled-components\";\r\nimport { loginData } from \"../services/login/loginData\";\r\nimport { emailState, nicknameState } from \"../state\";\r\n\r\nconst Input = styled.input`\r\n  width: 230px;\r\n  line-height: 22px;\r\n  border: 1px solid #dcdcdc;\r\n  border-radius: 5px;\r\n  padding: 9px 14px;\r\n  &::placeholder {\r\n    color: #a3a3a3;\r\n  }\r\n`;\r\n\r\nconst SubContainer = styled.div`\r\n  width: 260px;\r\n  margin: 0 auto;\r\n  font-size: 12px;\r\n  color: #4e514f;\r\n`;\r\n\r\nconst SubAlign = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n`;\r\n\r\nconst LoginButton = styled.button`\r\n  width: 260px;\r\n  height: 41px;\r\n  border-style: initial;\r\n  border-radius: 15px;\r\n  color: #ffffff;\r\n  margin-bottom: 10px;\r\n  background: #386ffe;\r\n  &:disabled {\r\n    background: #dcdcdc;\r\n  }\r\n`;\r\n\r\nconst InputContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n`;\r\n\r\nconst Formbox = styled.div`\r\n  position: relative;\r\n  margin-bottom: 20px;\r\n  .message {\r\n    font-size: 11px;\r\n    letter-spacing: -1px;\r\n    position: absolute;\r\n    bottom: -10px;\r\n    left: 0;\r\n    &.success {\r\n      color: #8f8c8b;\r\n    }\r\n    &.error {\r\n      color: #ff2727;\r\n    }\r\n  }\r\n`;\r\n\r\nconst ButtonContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n`;\r\n\r\nconst Login = () => {\r\n  const [uEmail, setuEmail] = useRecoilState(emailState);\r\n  const [uNickname, setuNickname] = useRecoilState(nicknameState);\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const [inputs, setInputs] = useState({\r\n    email: \"\",\r\n    password: \"\",\r\n  });\r\n\r\n  const { email, password } = inputs;\r\n\r\n  const onChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setInputs({\r\n      ...inputs,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  const onSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    const result = await loginData({\r\n      email: email,\r\n      password: password,\r\n    });\r\n\r\n    if (result === \"\") {\r\n      // 해당하는 회원 정보가 없는 경우 로그인 실패\r\n      alert(\"이메일 또는 비밀번호가 일치하지 않습니다.\");\r\n    } else {\r\n      // 로그인 성공\r\n      setuEmail(result.email); // recoil\r\n      setuNickname(result.nickname); // recoil\r\n\r\n      alert(\"로그인이 완료되었습니다.\");\r\n      navigate(\"/main\"); // 메인 페이지로 이동\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={onSubmit}>\r\n        <InputContainer>\r\n          <Formbox>\r\n            <Input\r\n              name=\"email\"\r\n              value={email}\r\n              type=\"email\"\r\n              onChange={onChange}\r\n              placeholder=\"이메일 주소 입력\"\r\n              required\r\n              autoComplete=\"off\"\r\n            />\r\n          </Formbox>\r\n          <Formbox>\r\n            <Input\r\n              name=\"password\"\r\n              value={password}\r\n              type=\"password\"\r\n              onChange={onChange}\r\n              placeholder=\"비밀번호 입력\"\r\n              required\r\n              autoComplete=\"off\"\r\n            />\r\n          </Formbox>\r\n        </InputContainer>\r\n        <ButtonContainer>\r\n          <LoginButton\r\n            type=\"submit\"\r\n            disabled={!(email !== \"\" && password !== \"\")}\r\n          >\r\n            로그인\r\n          </LoginButton>\r\n        </ButtonContainer>\r\n        <SubContainer>\r\n          <SubAlign>\r\n            <Link to=\"/\">\r\n              <span>이메일 회원가입</span>\r\n            </Link>\r\n            <span>이메일 찾기</span>\r\n            <span>비밀번호 찾기</span>\r\n          </SubAlign>\r\n        </SubContainer>\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","/Users/yeoinsu/Desktop/Ari/frontend/src/pages/LoginStore.js",[],[],"/Users/yeoinsu/Desktop/Ari/frontend/src/pages/SignupUser.js",["150"],[],"import { React, useState } from 'react';\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport axios from 'axios';\r\nimport styled from 'styled-components';\r\nimport { useRecoilState } from 'recoil';\r\nimport MainButton from '../components/common/Mainbutton';\r\nimport { nicknameState } from '../state';\r\nimport { signUserData } from '../services/sign/signUserData';\r\n\r\nconst Intro = styled.div`\r\n    color: #3D3D3D;\r\n`;\r\n\r\nconst Input = styled.input`\r\n    width: 230px;\r\n    line-height: 22px;\r\n    border: 1px solid #DCDCDC;\r\n    border-radius: 5px;\r\n    padding: 9px 14px;\r\n    &::placeholder {\r\n        color: #A3A3A3;\r\n    }\r\n`;\r\n\r\nconst CertificationInput = styled.input`\r\n    width: 142px;\r\n    line-height: 22px;\r\n    border: 1px solid #DCDCDC;\r\n    border-radius: 5px;\r\n    padding: 9px 14px;\r\n    margin-bottom: 21px;\r\n    &::placeholder {\r\n        color: #A3A3A3;\r\n    }\r\n`;\r\n\r\nconst SendButton = styled.button`\r\n    width: 76px;\r\n    line-height: 41px;\r\n    border-style: initial;\r\n    border-radius: 5px;\r\n    color: #FFFFFF;\r\n    background: #386FFE;\r\n    margin-bottom: 11px;\r\n    margin-left: 12px;\r\n`;\r\n\r\nconst InputContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    margin-bottom: 65px;\r\n`;\r\n\r\nconst Formbox = styled.div`\r\n    margin-bottom: 20px;\r\n    .message {\r\n        font-size: 11px;\r\n        letter-spacing: -1px;\r\n        margin: 0;\r\n        &.success {\r\n            color: #8f8c8b;\r\n        }\r\n        &.error {\r\n            color: #ff2727;\r\n        }\r\n    }\r\n`;\r\n\r\nconst ButtonContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    margin-bottom: 83px;\r\n`;\r\n\r\nconst SignupUser = () => {\r\n    const [uNickname, setuNickname] = useRecoilState(nicknameState);\r\n\r\n    const navigate = useNavigate();\r\n\r\n    // 이메일, 비밀번호, 닉네임, 생년월일\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [nickname, setNickname] = useState(\"\");\r\n    const [birthday, setBirthday] = useState(\"\");\r\n\r\n    // 오류 메세지 상태 저장\r\n    const [emailMessage, setEmailMessage] = useState(\"\");\r\n    const [passwordMessage, setPasswordMessage] = useState(\"\");\r\n    const [nicknameMessage, setNicknameMessage] = useState(\"\");\r\n    const [birthdayMessage, setBirthdayMessage] = useState(\"\");\r\n\r\n    // 유효성 검사\r\n    const [isEmail, setIsEmail] = useState(false);\r\n    const [isPassword, setIsPassword] = useState(false);\r\n    const [isNickname, setIsNickname] = useState(false);\r\n    const [isBirthday, setIsBirthday] = useState(false);\r\n\r\n    // 이메일\r\n    const onChangeEmail = (e) => {\r\n        const emailRegex =\r\n            /([\\w-.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([\\w-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)$/;\r\n        setEmail(e.target.value);\r\n\r\n        if (!emailRegex.test(e.target.value)) {\r\n            setEmailMessage('이메일 형식을 다시 확인해주세요.');\r\n            setIsEmail(false);\r\n        } else {\r\n            setEmailMessage('올바른 이메일 형식입니다.');\r\n            setIsEmail(true);\r\n        }\r\n    };\r\n\r\n    // 비밀번호\r\n    const onChangePassword = (e) => {\r\n        const passwordRegex = /^(?=.*[a-zA-Z])(?=.*[!@#$%^*+=-])(?=.*[0-9]).{8,25}$/;\r\n        setPassword(e.target.value);\r\n\r\n        if (!passwordRegex.test(e.target.value)) {\r\n            setPasswordMessage('숫자+영문자+특수문자 조합으로 8자리 이상 입력해주세요.');\r\n            setIsPassword(false);\r\n        } else {\r\n            setPasswordMessage('안전한 비밀번호입니다.');\r\n            setIsPassword(true);\r\n        }\r\n    };\r\n\r\n    // 닉네임\r\n    const onChangeNickname = (e) => {\r\n        setNickname(e.target.value)\r\n        if (e.target.value.length < 2 || e.target.value.length > 5) {\r\n            setNicknameMessage('2글자 이상 5글자 미만으로 입력해주세요.');\r\n            setIsNickname(false);\r\n        } else {\r\n            setNicknameMessage('올바른 닉네임 형식입니다.')\r\n            setIsNickname(true)\r\n        }\r\n    };\r\n\r\n    // 생년월일\r\n    const onChangeBirthday = (e) => {\r\n        const birthdayRegex = /^(19[0-9][0-9]|20\\d{2})(0[0-9]|1[0-2])(0[1-9]|[1-2][0-9]|3[0-1])$/;\r\n        setBirthday(e.target.value);\r\n\r\n        if (!birthdayRegex.test(e.target.value)) {\r\n            setBirthdayMessage('생년월일 8자리를 입력해주세요.');\r\n            setIsBirthday(false);\r\n        } else {\r\n            setBirthdayMessage('올바른 생년월일 형식입니다.');\r\n            setIsBirthday(true);\r\n        }\r\n    };\r\n\r\n    // 입력한 인증번호\r\n    const [certificationNumber, setCertificationNumber] = useState(\"\");\r\n\r\n    const onChangeCertificationNumber = (e) => {\r\n        setCertificationNumber(e.target.value);\r\n    };\r\n\r\n    // 인증번호 확인\r\n    const [emailCheck, setEmailCheck] = useState(\"\");\r\n    const [emailCheckMessage, setEmailCheckMessage] = useState(\"\");\r\n    const [isEmailCheck, setIsEmailCheck] = useState(false);\r\n\r\n    // 이메일로 인증번호 보내고, 보낸 인증번호를 emailCheck에 저장\r\n    const getEmailCheck = async () => {\r\n        try {\r\n            await axios\r\n                .get(`http://.../signup/certification?email=${email}`)\r\n                .then((res) => {\r\n                    console.log(res.data);\r\n                    setEmailCheck(res.data);\r\n                });\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    }\r\n\r\n    const onEmailCheck = () => {\r\n        console.log(certificationNumber);\r\n        console.log(emailCheck);\r\n        if (certificationNumber !== emailCheck) {\r\n            setEmailCheckMessage('잘못된 인증번호입니다.');\r\n            setIsEmailCheck(false);\r\n        } else {\r\n            setEmailCheckMessage('인증에 성공했습니다.');\r\n            setIsEmailCheck(true);\r\n        }\r\n    };\r\n    \r\n    const onSubmit = async (e) => {\r\n        e.preventDefault();\r\n\r\n        const result = await signUserData({\r\n            email: email,\r\n            password: password,\r\n            nickname: nickname,\r\n            birthday: birthday,\r\n        });\r\n        setuNickname(result); // recoil\r\n\r\n        alert(\"회원가입이 완료되었습니다.\");\r\n        navigate(\"/login\"); // 로그인 공통 페이지로 이동\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <form onSubmit={onSubmit}>\r\n                <InputContainer>\r\n                    <Formbox>\r\n                        <Intro>이메일 주소</Intro>\r\n                        <Input\r\n                            name=\"email\"\r\n                            value={email}\r\n                            type=\"email\"\r\n                            onChange={onChangeEmail}\r\n                            placeholder=\"이메일 주소 입력\"\r\n                            required\r\n                            autoComplete=\"off\"\r\n                        />\r\n                        {email.length > 0 && <p className={`message ${isEmail ? 'success' : 'error'}`}>{emailMessage}</p>}\r\n                    </Formbox>\r\n                    <Formbox>\r\n                        <Intro>비밀번호</Intro>\r\n                        <Input\r\n                            name=\"password\"\r\n                            value={password}\r\n                            type=\"password\"\r\n                            onChange={onChangePassword}\r\n                            placeholder=\"비밀번호 입력\"\r\n                            required\r\n                            autoComplete=\"off\"\r\n                        />\r\n                        {password.length > 0 && <p className={`message ${isPassword ? 'success' : 'error'}`}>{passwordMessage}</p>}\r\n                    </Formbox>\r\n                    <Formbox>\r\n                        <Intro>닉네임</Intro>\r\n                        <Input\r\n                            name=\"nickname\"\r\n                            value={nickname}\r\n                            type=\"text\"\r\n                            onChange={onChangeNickname}\r\n                            placeholder=\"닉네임 입력\"\r\n                            required\r\n                            autoComplete=\"off\"\r\n                        />\r\n                        {nickname.length > 0 && <p className={`message ${isNickname ? 'success' : 'error'}`}>{nicknameMessage}</p>}\r\n                    </Formbox>\r\n                    <Formbox>\r\n                        <Intro>생년월일</Intro>\r\n                        <Input\r\n                            name=\"birthday\"\r\n                            value={birthday}\r\n                            type=\"text\"\r\n                            onChange={onChangeBirthday}\r\n                            placeholder=\"생년월일 입력\"\r\n                            required\r\n                            autoComplete=\"off\"\r\n                        />\r\n                        {birthday.length > 0 && <p className={`message ${isBirthday ? 'success' : 'error'}`}>{birthdayMessage}</p>}\r\n                    </Formbox>\r\n                    <Formbox>\r\n                        <Intro>메일 인증</Intro>\r\n                        <div>\r\n                            <CertificationInput\r\n                                name=\"certificationNumber\"\r\n                                value={certificationNumber}\r\n                                type=\"text\"\r\n                                onChange={onChangeCertificationNumber}\r\n                                placeholder=\"인증번호 입력\"\r\n                                required\r\n                                autoComplete=\"off\"\r\n                            />\r\n                            <SendButton type=\"button\" onClick={getEmailCheck}>전송</SendButton>\r\n                        </div>\r\n                        <MainButton\r\n                            radius=\"5px\"\r\n                            color=\"#FFFFFF\"\r\n                            background=\"#386FFE;\"\r\n                            type=\"button\"\r\n                            onClick={onEmailCheck}\r\n                            disabled={(certificationNumber.length > 0) ? false : true}\r\n                            text=\"인증 확인\"\r\n                        />\r\n                        {certificationNumber.length > 0 && <p className={`message ${isEmailCheck ? 'success' : 'error'}`}>{emailCheckMessage}</p>}\r\n                    </Formbox>\r\n                </InputContainer>\r\n                <ButtonContainer>\r\n                    <MainButton\r\n                        radius=\"15px\"\r\n                        color=\"#FFFFFF\"\r\n                        background=\"#386FFE;\"\r\n                        type=\"submit\"\r\n                        disabled={(isNickname && isEmail && isPassword && isEmailCheck) ? false : true}\r\n                        text=\"회원가입\"\r\n                    />\r\n                </ButtonContainer>\r\n            </form>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SignupUser;","/Users/yeoinsu/Desktop/Ari/frontend/src/pages/LoginUser.js",[],[],"/Users/yeoinsu/Desktop/Ari/frontend/src/pages/SignupStore.js",["151"],[],"import { React, useState } from 'react';\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport axios from 'axios';\r\nimport styled from 'styled-components';\r\nimport MainButton from '../components/common/Mainbutton';\r\nimport { useRecoilState } from 'recoil';\r\nimport { signStoreData } from '../services/sign/signStoreData';\r\nimport { nicknameState } from '../state';\r\n\r\nconst Intro = styled.div`\r\n    color: #3D3D3D;\r\n`;\r\n\r\nconst Input = styled.input`\r\n    width: 230px;\r\n    line-height: 22px;\r\n    border: 1px solid #DCDCDC;\r\n    border-radius: 5px;\r\n    padding: 9px 14px;\r\n    &::placeholder {\r\n        color: #A3A3A3;\r\n    }\r\n`;\r\n\r\nconst CertificationInput = styled.input`\r\n    width: 142px;\r\n    line-height: 22px;\r\n    border: 1px solid #DCDCDC;\r\n    border-radius: 5px;\r\n    padding: 9px 14px;\r\n    margin-bottom: 21px;\r\n    &::placeholder {\r\n        color: #A3A3A3;\r\n    }\r\n`;\r\n\r\nconst SendButton = styled.button`\r\n    width: 76px;\r\n    line-height: 41px;\r\n    border-style: initial;\r\n    border-radius: 5px;\r\n    color: #FFFFFF;\r\n    background: #386FFE;\r\n    margin-bottom: 11px;\r\n    margin-left: 12px;\r\n`;\r\n\r\nconst InputContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    margin-bottom: 65px;\r\n`;\r\n\r\nconst Formbox = styled.div`\r\n    margin-bottom: 20px;\r\n    .message {\r\n        font-size: 11px;\r\n        letter-spacing: -1px;\r\n        margin: 0;\r\n        &.success {\r\n            color: #8f8c8b;\r\n        }\r\n        &.error {\r\n            color: #ff2727;\r\n        }\r\n    }\r\n`;\r\n\r\nconst ButtonContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    margin-bottom: 83px;\r\n`;\r\n\r\nconst SignupUser = () => {\r\n    const [uNickname, setuNickname] = useRecoilState(nicknameState);\r\n\r\n    const navigate = useNavigate();\r\n\r\n    // 이메일, 비밀번호, 닉네임, 가게 인증 코드\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [nickname, setNickname] = useState(\"\");\r\n    const [storeCode, setStoreCode] = useState(\"\");\r\n\r\n    // 오류 메세지 상태 저장\r\n    const [emailMessage, setEmailMessage] = useState(\"\");\r\n    const [passwordMessage, setPasswordMessage] = useState(\"\");\r\n    const [nicknameMessage, setNicknameMessage] = useState(\"\");\r\n    const [storeCodeMessage, setStoreCodeMessage] = useState(\"\");\r\n\r\n    // 유효성 검사\r\n    const [isEmail, setIsEmail] = useState(false);\r\n    const [isPassword, setIsPassword] = useState(false);\r\n    const [isNickname, setIsNickname] = useState(false);\r\n    const [isStoreCode, setIsStoreCode] = useState(false);\r\n\r\n    // 이메일\r\n    const onChangeEmail = (e) => {\r\n        const emailRegex =\r\n            /([\\w-.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([\\w-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)$/;\r\n        setEmail(e.target.value);\r\n\r\n        if (!emailRegex.test(e.target.value)) {\r\n            setEmailMessage('이메일 형식을 다시 확인해주세요.');\r\n            setIsEmail(false);\r\n        } else {\r\n            setEmailMessage('올바른 이메일 형식입니다.');\r\n            setIsEmail(true);\r\n        }\r\n    };\r\n\r\n    // 비밀번호\r\n    const onChangePassword = (e) => {\r\n        const passwordRegex = /^(?=.*[a-zA-Z])(?=.*[!@#$%^*+=-])(?=.*[0-9]).{8,25}$/;\r\n        setPassword(e.target.value);\r\n\r\n        if (!passwordRegex.test(e.target.value)) {\r\n            setPasswordMessage('숫자+영문자+특수문자 조합으로 8자리 이상 입력해주세요.');\r\n            setIsPassword(false);\r\n        } else {\r\n            setPasswordMessage('안전한 비밀번호입니다.');\r\n            setIsPassword(true);\r\n        }\r\n    };\r\n\r\n    // 닉네임\r\n    const onChangeNickname = (e) => {\r\n        setNickname(e.target.value)\r\n        if (e.target.value.length < 2 || e.target.value.length > 5) {\r\n            setNicknameMessage('2글자 이상 5글자 미만으로 입력해주세요.');\r\n            setIsNickname(false);\r\n        } else {\r\n            setNicknameMessage('올바른 닉네임 형식입니다.')\r\n            setIsNickname(true)\r\n        }\r\n    };\r\n\r\n    // 가게 인증 코드\r\n    const onChangeStoreCode = (e) => {\r\n        setStoreCode(e.target.value);\r\n    };\r\n\r\n    // 입력한 인증번호\r\n    const [certificationNumber, setCertificationNumber] = useState(\"\");\r\n\r\n    const onChangeCertificationNumber = (e) => {\r\n        setCertificationNumber(e.target.value);\r\n    };\r\n\r\n    // 인증번호 확인\r\n    const [emailCheck, setEmailCheck] = useState(\"\");\r\n    const [emailCheckMessage, setEmailCheckMessage] = useState(\"\");\r\n    const [isEmailCheck, setIsEmailCheck] = useState(false);\r\n\r\n    // 이메일로 인증번호 보내고, 보낸 인증번호를 emailCheck에 저장\r\n    const getEmailCheck = async () => {\r\n        try {\r\n            await axios\r\n                .get(`http://.../signup/certification?email=${email}`)\r\n                .then((res) => {\r\n                    console.log(res.data);\r\n                    setEmailCheck(res.data);\r\n                });\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    }\r\n\r\n    const onEmailCheck = () => {\r\n        console.log(certificationNumber);\r\n        console.log(emailCheck);\r\n        if (certificationNumber !== emailCheck) {\r\n            setEmailCheckMessage('잘못된 인증번호입니다.');\r\n            setIsEmailCheck(false);\r\n        } else {\r\n            setEmailCheckMessage('인증에 성공했습니다.');\r\n            setIsEmailCheck(true);\r\n        }\r\n    };\r\n\r\n    // 존재하는 가게 인증 번호인지 확인, isStoreCode에 true/false 저장\r\n    const getStoreCode = async (storeCode) => {\r\n        try {\r\n            await axios\r\n                .get(`http://.../storeCode?${storeCode}`)\r\n                .then((res) => {\r\n                    console.log(res.data);\r\n                    setIsStoreCode(res.data);\r\n                })\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    }\r\n\r\n    const checkStoreCode = () => {\r\n        console.log(storeCode);\r\n        console.log(isStoreCode);\r\n        getStoreCode(storeCode);\r\n\r\n        if (!isStoreCode) {\r\n            setStoreCodeMessage('잘못된 가게 인증 번호입니다.');\r\n            setIsStoreCode(false);\r\n        } else {\r\n            setStoreCodeMessage('인증에 성공했습니다.');\r\n            setIsStoreCode(true);\r\n        }\r\n    };\r\n    \r\n    const onSubmit = async (e) => {\r\n        e.preventDefault();\r\n        checkStoreCode(); // 가게 인증 번호 확인\r\n        if (!isStoreCode) return;\r\n\r\n        const result = await signStoreData({\r\n            email: email,\r\n            password: password,\r\n            nickname: nickname,\r\n            storeCode: storeCode,\r\n        });\r\n        setuNickname(result); // recoil\r\n\r\n        alert(\"회원가입이 완료되었습니다.\");\r\n        navigate(\"/login\"); // 로그인 공통 페이지로 이동\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <form onSubmit={onSubmit}>\r\n                <InputContainer>\r\n                    <Formbox>\r\n                        <Intro>이메일 주소</Intro>\r\n                        <Input\r\n                            name=\"email\"\r\n                            value={email}\r\n                            type=\"email\"\r\n                            onChange={onChangeEmail}\r\n                            placeholder=\"이메일 주소 입력\"\r\n                            required\r\n                            autoComplete=\"off\"\r\n                        />\r\n                        {email.length > 0 && <p className={`message ${isEmail ? 'success' : 'error'}`}>{emailMessage}</p>}\r\n                    </Formbox>\r\n                    <Formbox>\r\n                        <Intro>비밀번호</Intro>\r\n                        <Input\r\n                            name=\"password\"\r\n                            value={password}\r\n                            type=\"password\"\r\n                            onChange={onChangePassword}\r\n                            placeholder=\"비밀번호 입력\"\r\n                            required\r\n                            autoComplete=\"off\"\r\n                        />\r\n                        {password.length > 0 && <p className={`message ${isPassword ? 'success' : 'error'}`}>{passwordMessage}</p>}\r\n                    </Formbox>\r\n                    <Formbox>\r\n                        <Intro>닉네임</Intro>\r\n                        <Input\r\n                            name=\"nickname\"\r\n                            value={nickname}\r\n                            type=\"text\"\r\n                            onChange={onChangeNickname}\r\n                            placeholder=\"닉네임 입력\"\r\n                            required\r\n                            autoComplete=\"off\"\r\n                        />\r\n                        {nickname.length > 0 && <p className={`message ${isNickname ? 'success' : 'error'}`}>{nicknameMessage}</p>}\r\n                    </Formbox>\r\n                    <Formbox>\r\n                        <Intro>가게 인증</Intro>\r\n                        <Input\r\n                            name=\"storeCode\"\r\n                            value={storeCode}\r\n                            type=\"text\"\r\n                            onChange={onChangeStoreCode}\r\n                            placeholder=\"가게 인증 코드 입력\"\r\n                            required\r\n                            autoComplete=\"off\"\r\n                        />\r\n                        {storeCode.length > 0 && <p className={`message ${isStoreCode ? 'success' : 'error'}`}>{storeCodeMessage}</p>}\r\n                    </Formbox>\r\n                    <Formbox>\r\n                        <Intro>메일 인증</Intro>\r\n                        <div>\r\n                            <CertificationInput\r\n                                name=\"certificationNumber\"\r\n                                value={certificationNumber}\r\n                                type=\"text\"\r\n                                onChange={onChangeCertificationNumber}\r\n                                placeholder=\"인증번호 입력\"\r\n                                required\r\n                                autoComplete=\"off\"\r\n                            />\r\n                            <SendButton type=\"button\" onClick={getEmailCheck}>전송</SendButton>\r\n                        </div>\r\n                        <MainButton\r\n                            radius=\"5px\"\r\n                            color=\"#FFFFFF\"\r\n                            background=\"#386FFE;\"\r\n                            type=\"button\"\r\n                            onClick={onEmailCheck}\r\n                            disabled={(certificationNumber.length > 0) ? false : true}\r\n                            text=\"인증 확인\"\r\n                        />\r\n                        {certificationNumber.length > 0 && <p className={`message ${isEmailCheck ? 'success' : 'error'}`}>{emailCheckMessage}</p>}\r\n                    </Formbox>\r\n                </InputContainer>\r\n                <ButtonContainer>\r\n                    <MainButton\r\n                        radius=\"15px\"\r\n                        color=\"#FFFFFF\"\r\n                        background=\"#386FFE;\"\r\n                        type=\"submit\"\r\n                        disabled={(isNickname && isEmail && isPassword && isEmailCheck) ? false : true}\r\n                        text=\"회원가입\"\r\n                    />\r\n                </ButtonContainer>\r\n            </form>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SignupUser;","/Users/yeoinsu/Desktop/Ari/frontend/src/state.js",[],[],"/Users/yeoinsu/Desktop/Ari/frontend/src/services/login/loginData.js",[],[],"/Users/yeoinsu/Desktop/Ari/frontend/src/services/sign/signStoreData.js",[],[],"/Users/yeoinsu/Desktop/Ari/frontend/src/services/sign/signUserData.js",[],[],"/Users/yeoinsu/Desktop/Ari/frontend/src/components/common/Mainbutton.js",[],[],{"ruleId":"152","replacedBy":"153"},{"ruleId":"154","replacedBy":"155"},{"ruleId":"156","severity":1,"message":"157","line":1,"column":10,"nodeType":"158","messageId":"159","endLine":1,"endColumn":18},{"ruleId":"152","replacedBy":"160"},{"ruleId":"154","replacedBy":"161"},{"ruleId":"156","severity":1,"message":"162","line":2,"column":10,"nodeType":"158","messageId":"159","endLine":2,"endColumn":14},{"ruleId":"152","replacedBy":"163"},{"ruleId":"154","replacedBy":"164"},{"ruleId":"156","severity":1,"message":"162","line":4,"column":10,"nodeType":"158","messageId":"159","endLine":4,"endColumn":14},{"ruleId":"152","replacedBy":"165"},{"ruleId":"154","replacedBy":"166"},{"ruleId":"156","severity":1,"message":"157","line":1,"column":10,"nodeType":"158","messageId":"159","endLine":1,"endColumn":18},{"ruleId":"156","severity":1,"message":"162","line":2,"column":10,"nodeType":"158","messageId":"159","endLine":2,"endColumn":14},{"ruleId":"156","severity":1,"message":"162","line":4,"column":10,"nodeType":"158","messageId":"159","endLine":4,"endColumn":14},{"ruleId":"156","severity":1,"message":"167","line":75,"column":10,"nodeType":"158","messageId":"159","endLine":75,"endColumn":16},{"ruleId":"156","severity":1,"message":"168","line":76,"column":10,"nodeType":"158","messageId":"159","endLine":76,"endColumn":19},{"ruleId":"156","severity":1,"message":"168","line":78,"column":12,"nodeType":"158","messageId":"159","endLine":78,"endColumn":21},{"ruleId":"156","severity":1,"message":"168","line":78,"column":12,"nodeType":"158","messageId":"159","endLine":78,"endColumn":21},"no-native-reassign",["169"],"no-negated-in-lhs",["170"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar",["169"],["170"],"'Link' is defined but never used.",["169"],["170"],["169"],["170"],"'uEmail' is assigned a value but never used.","'uNickname' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]